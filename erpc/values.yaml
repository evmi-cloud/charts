# Default values for erpc.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/erpc/erpc
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

erpc:
  server:
    listenV4: true
    httpHostV4: "0.0.0.0"
    httpPort: 4000
    enableGzip: true

  metrics:
    enabled: true
    listenV4: true
    hostV4: "0.0.0.0"
    port: 4001

  database:
    evmJsonRpcCache:
      connectors:
      - id: redis-cache
        driver: redis
        redis:
          addr: redis-headless
          password: erpc
          db: 0
          connPoolSize: 128

  projects:
    - id: polygon
      evm:
        chainId: 137
      failsafe:
        timeout:
          # On network-level "timeout" is applied for the whole lifecycle of the request (including however many retries happens on upstream)
          duration: 120s
        retry:
          # It is recommended to set a retry policy on network-level to make sure if one upstream is rate-limited,
          # the request will be retried on another upstream.
          maxCount: 5
          delay: 100ms
          jitter: 0ms
          backoffMaxDelay: 1s
          backoffFactor: 1.5
        # Defining a "hedge" is highly-recommended on network-level because if upstream A is being slow for
        # a specific request, it can start a new parallel hedged request to upstream B, for whichever responds faster.
        hedge:
          delay: 200ms
          maxCount: 3

      upstreams:
        - id: blast-rpc
          endpoint: https://polygon-bor-rpc.publicnode.com
          jsonRpc:
            supportsBatch: true
            batchMaxSize: 10
            batchMaxWait: 50ms
      

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

readinessProbe:
  httpGet:
    path: /healthcheck
    port: 4000
  initialDelaySeconds: 5
  periodSeconds: 10
livenessProbe:
  httpGet:
    path: /healthcheck
    port: 4000
  initialDelaySeconds: 5
  periodSeconds: 10

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
